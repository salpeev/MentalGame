//
//  GLDefaultConstants.h
//  MentalGame
//
//  Created by Sergey Alpeev on 26.12.13.
//  Copyright (c) 2013 Sergey Alpeev. All rights reserved.
//

#pragma once



enum GLSL_BUFFER
{
    GLSL_ARRAY_BUFFER = GL_ARRAY_BUFFER,
    GLSL_ELEMENT_ARRAY_BUFFER = GL_ELEMENT_ARRAY_BUFFER
};

enum GLSL_BUFFER_USAGE
{
    GLSL_BUFFER_USAGE_STREAM_DRAW = GL_STREAM_DRAW,
    GLSL_BUFFER_USAGE_STATIC_DRAW = GL_STATIC_DRAW,
    GLSL_BUFFER_USAGE_DYNAMIC_DRAW = GL_DYNAMIC_DRAW
};

enum GLSL_SHADER_TYPE
{
    GLSL_SHADER_TYPE_VERTEX = GL_VERTEX_SHADER,
    GLSL_SHADER_TYPE_FRAGMENT = GL_FRAGMENT_SHADER
};

enum GLSL_GET_PARAMETER
{
    // TODO: New values should be added
    GLSL_GET_PARAMETER_ARRAY_BUFFER_BINDING = GL_ARRAY_BUFFER_BINDING,
    GLSL_GET_PARAMETER_ELEMENT_ARRAY_BUFFER_BINDING = GL_ELEMENT_ARRAY_BUFFER_BINDING
};

enum GLSL_DATA_TYPE
{
    // TODO: New values should be added
    GLSL_DATA_TYPE_UNSIGNED_BYTE = GL_UNSIGNED_BYTE,
    GLSL_DATA_TYPE_UNSIGNED_SHORT = GL_UNSIGNED_SHORT
};

enum GLSL_RENDER_MODE
{
    GLSL_RENDER_MODE_POINTS = GL_POINTS,
    GLSL_RENDER_MODE_LINE_STRIP = GL_LINE_STRIP,
    GLSL_RENDER_MODE_LINE_LOOP = GL_LINE_LOOP,
    GLSL_RENDER_MODE_LINES = GL_LINES,
    GLSL_RENDER_MODE_TRIANGLE_STRIP = GL_TRIANGLE_STRIP,
    GLSL_RENDER_MODE_TRIANGLE_FAN = GL_TRIANGLE_FAN,
    GLSL_RENDER_MODE_TRIANGLES = GL_TRIANGLES
};
