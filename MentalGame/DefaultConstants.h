//
//  GLDefaultConstants.h
//  MentalGame
//
//  Created by Sergey Alpeev on 26.12.13.
//  Copyright (c) 2013 Sergey Alpeev. All rights reserved.
//

#pragma once
#include <OpenGLES/ES2/gl.h>



enum GLSL_BUFFER
{
    GLSL_ARRAY_BUFFER = GL_ARRAY_BUFFER,
    GLSL_ELEMENT_ARRAY_BUFFER = GL_ELEMENT_ARRAY_BUFFER
};

enum GLSL_BUFFER_USAGE
{
    GLSL_BUFFER_USAGE_STREAM_DRAW = GL_STREAM_DRAW,
    GLSL_BUFFER_USAGE_STATIC_DRAW = GL_STATIC_DRAW,
    GLSL_BUFFER_USAGE_DYNAMIC_DRAW = GL_DYNAMIC_DRAW
};

enum GLSL_SHADER_TYPE
{
    GLSL_SHADER_TYPE_VERTEX = GL_VERTEX_SHADER,
    GLSL_SHADER_TYPE_FRAGMENT = GL_FRAGMENT_SHADER
};

enum GET_PARAMETER
{
    // TODO: New values should be added
    GET_PARAMETER_ARRAY_BUFFER_BINDING = GL_ARRAY_BUFFER_BINDING,
    GET_PARAMETER_COLOR_CLEAR_VALUE = GL_COLOR_CLEAR_VALUE,
    GET_PARAMETER_CURRENT_PROGRAM = GL_CURRENT_PROGRAM,
    GET_PARAMETER_DEPTH_CLEAR_VALUE = GL_DEPTH_CLEAR_VALUE,
    GET_PARAMETER_ELEMENT_ARRAY_BUFFER_BINDING = GL_ELEMENT_ARRAY_BUFFER_BINDING,
    GET_PARAMETER_FRAMEBUFFER_BINDING = GL_FRAMEBUFFER_BINDING,
    GET_PARAMETER_RENDERBUFFER_BINDING = GL_RENDERBUFFER_BINDING,
    GET_PARAMETER_STENCIL_CLEAR_VALUE = GL_STENCIL_CLEAR_VALUE,
    GET_PARAMETER_VIEWPORT = GL_VIEWPORT,
    GET_PARAMETER_TEXTURE_BINDING_2D = GL_TEXTURE_BINDING_2D
};

enum GLSL_DATA_TYPE
{
    GLSL_DATA_TYPE_BYTE = GL_BYTE,
    GLSL_DATA_TYPE_UNSIGNED_BYTE = GL_UNSIGNED_BYTE,
    GLSL_DATA_TYPE_SHORT = GL_SHORT,
    GLSL_DATA_TYPE_UNSIGNED_SHORT = GL_UNSIGNED_SHORT,
    GLSL_DATA_TYPE_INT = GL_INT,
    GLSL_DATA_TYPE_UNSIGNED_INT = GL_UNSIGNED_INT,
    GLSL_DATA_TYPE_FLOAT = GL_FLOAT,
    GLSL_DATA_TYPE_FIXED = GL_FIXED
};

enum GLSL_RENDER_MODE
{
    GLSL_RENDER_MODE_POINTS = GL_POINTS,
    GLSL_RENDER_MODE_LINE_STRIP = GL_LINE_STRIP,
    GLSL_RENDER_MODE_LINE_LOOP = GL_LINE_LOOP,
    GLSL_RENDER_MODE_LINES = GL_LINES,
    GLSL_RENDER_MODE_TRIANGLE_STRIP = GL_TRIANGLE_STRIP,
    GLSL_RENDER_MODE_TRIANGLE_FAN = GL_TRIANGLE_FAN,
    GLSL_RENDER_MODE_TRIANGLES = GL_TRIANGLES
};

enum GLSL_ERROR
{
    GLSL_ERROR_NO_ERROR = GL_NO_ERROR,
    GLSL_ERROR_INVALID_ENUM = GL_INVALID_ENUM,
    GLSL_ERROR_INVALID_VALUE = GL_INVALID_VALUE,
    GLSL_ERROR_INVALID_OPERATION = GL_INVALID_OPERATION,
    GLSL_ERROR_INVALID_FRAMEBUFFER_OPERATION = GL_INVALID_FRAMEBUFFER_OPERATION,
    GLSL_ERROR_OUT_OF_MEMORY = GL_OUT_OF_MEMORY
};

enum GLSL_BOOL
{
    GLSL_FALSE = GL_FALSE,
    GLSL_TRUE = GL_TRUE
};

enum GLSL_PROGRAM_IV
{
    GLSL_PROGRAM_IV_DELETE_STATUS = GL_DELETE_STATUS,
    GLSL_PROGRAM_IV_LINK_STATUS = GL_LINK_STATUS,
    GLSL_PROGRAM_IV_VALIDATE_STATUS = GL_VALIDATE_STATUS,
    GLSL_PROGRAM_IV_INFO_LOG_LENGTH = GL_INFO_LOG_LENGTH,
    GLSL_PROGRAM_IV_ATTACHED_SHADERS = GL_ATTACHED_SHADERS,
    GLSL_PROGRAM_IV_ACTIVE_ATTRIBUTES = GL_ACTIVE_ATTRIBUTES,
    GLSL_PROGRAM_IV_ACTIVE_ATTRIBUTE_MAX_LENGTH = GL_ACTIVE_ATTRIBUTE_MAX_LENGTH,
    GLSL_PROGRAM_IV_ACTIVE_UNIFORMS = GL_ACTIVE_UNIFORMS,
    GLSL_PROGRAM_IV_ACTIVE_UNIFORM_MAX_LENGTH = GL_ACTIVE_UNIFORM_MAX_LENGTH
};

enum GLSL_SHADER_IV
{
    GLSL_SHADER_IV_SHADER_TYPE = GL_SHADER_TYPE,
    GLSL_SHADER_IV_DELETE_STATUS = GL_DELETE_STATUS,
    GLSL_SHADER_IV_COMPILE_STATUS = GL_COMPILE_STATUS,
    GLSL_SHADER_IV_INFO_LOG_LENGTH = GL_INFO_LOG_LENGTH,
    GLSL_SHADER_IV_SHADER_SOURCE_LENGTH = GL_SHADER_SOURCE_LENGTH
};

enum GLSL_GET_VERTEX_ATTRIB
{
    GLSL_GET_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING,
    GLSL_GET_VERTEX_ATTRIB_ARRAY_ENABLED = GL_VERTEX_ATTRIB_ARRAY_ENABLED,
    GLSL_GET_VERTEX_ATTRIB_ARRAY_SIZE = GL_VERTEX_ATTRIB_ARRAY_SIZE,
    GLSL_GET_VERTEX_ATTRIB_ARRAY_STRIDE = GL_VERTEX_ATTRIB_ARRAY_STRIDE,
    GLSL_GET_VERTEX_ATTRIB_ARRAY_TYPE = GL_VERTEX_ATTRIB_ARRAY_TYPE,
    GLSL_GET_VERTEX_ATTRIB_ARRAY_NORMALIZED = GL_VERTEX_ATTRIB_ARRAY_NORMALIZED,
    GLSL_GET_VERTEX_ATTRIB_CURRENT_VERTEX_ATTRIB = GL_CURRENT_VERTEX_ATTRIB
};

enum FRAMEBUFFER_OBJECT {
    FRAMEBUFFER_OBJECT_FRAMEBUFFER = GL_FRAMEBUFFER,
    FRAMEBUFFER_OBJECT_RENDERBUFFER = GL_RENDERBUFFER
};

enum FRAMEBUFFER_ATTACHMENT {
    FRAMEBUFFER_ATTACHMENT_COLOR0 = GL_COLOR_ATTACHMENT0,
    FRAMEBUFFER_ATTACHMENT_DEPTH = GL_DEPTH_ATTACHMENT,
    FRAMEBUFFER_ATTACHMENT_STENCIL = GL_STENCIL_ATTACHMENT
};

enum COLOR_RENDERBUFFER_FORMAT {
    COLOR_RENDERBUFFER_FORMAT_RGBA4 = GL_RGBA4,
    COLOR_RENDERBUFFER_FORMAT_RGB565 = GL_RGB565,
    COLOR_RENDERBUFFER_FORMAT_RGB5_A1 = GL_RGB5_A1
};

enum DEPTH_RENDERBUFFER_FORMAT {
    DEPTH_RENDERBUFFER_FORMAT_COMPONENT16 = GL_DEPTH_COMPONENT16
};

enum STENCIL_RENDERBUFFER_FORMAT {
    STENCIL_RENDERBUFFER_FORMAT_INDEX8 = GL_STENCIL_INDEX8
};

enum CLEAR_BUFFER_BIT {
    CLEAR_BUFFER_BIT_COLOR = GL_COLOR_BUFFER_BIT,
    CLEAR_BUFFER_BIT_DEPTH = GL_DEPTH_BUFFER_BIT,
    CLEAR_BUFFER_BIT_STENCIL = GL_STENCIL_BUFFER_BIT
};

enum TEXTURE {
    TEXTURE_2D = GL_TEXTURE_2D,
    TEXTURE_CUBE_MAP = GL_TEXTURE_CUBE_MAP
};

enum TEX_PARAMETER {
    TEX_PARAMETER_MIN_FILTER = GL_TEXTURE_MIN_FILTER,
    TEX_PARAMETER_MAG_FILTER = GL_TEXTURE_MAG_FILTER,
    TEX_PARAMETER_WRAP_S = GL_TEXTURE_WRAP_S,
    TEX_PARAMETER_WRAP_T = GL_TEXTURE_WRAP_T
};

enum TEX_MIN_FILTER {
    TEX_MIN_FILTER_NEAREST = GL_NEAREST,
    TEX_MIN_FILTER_LINEAR = GL_LINEAR,
    TEX_MIN_FILTER_NEAREST_MIPMAP_NEAREST = GL_NEAREST_MIPMAP_NEAREST,
    TEX_MIN_FILTER_LINEAR_MIPMAP_NEAREST = GL_LINEAR_MIPMAP_NEAREST,
    TEX_MIN_FILTER_NEAREST_MIPMAP_LINEAR = GL_NEAREST_MIPMAP_LINEAR,
    TEX_MIN_FILTER_LINEAR_MIPMAP_LINEAR = GL_LINEAR_MIPMAP_LINEAR
};

enum TEX_MAG_FILTER {
    TEX_MAG_FILTER_NEAREST = GL_NEAREST,
    TEX_MAG_FILTER_LINEAR = GL_LINEAR
};

enum TEX_WRAP {
    TEX_WRAP_CLAMP_TO_EDGE = GL_CLAMP_TO_EDGE,
    TEX_WRAP_MIRRORED_REPEAT = GL_MIRRORED_REPEAT,
    TEX_WRAP_REPEAT = GL_REPEAT
};

enum TEX_INDEX {
    TEX_INDEX_0 = GL_TEXTURE0,
    TEX_INDEX_1 = GL_TEXTURE1,
    TEX_INDEX_2 = GL_TEXTURE2,
    TEX_INDEX_3 = GL_TEXTURE3,
    TEX_INDEX_4 = GL_TEXTURE4,
    TEX_INDEX_5 = GL_TEXTURE5,
    TEX_INDEX_6 = GL_TEXTURE6,
    TEX_INDEX_7 = GL_TEXTURE7,
    TEX_INDEX_8 = GL_TEXTURE8,
    TEX_INDEX_9 = GL_TEXTURE9,
    TEX_INDEX_10 = GL_TEXTURE10,
    TEX_INDEX_11 = GL_TEXTURE11,
    TEX_INDEX_12 = GL_TEXTURE12,
    TEX_INDEX_13 = GL_TEXTURE13,
    TEX_INDEX_14 = GL_TEXTURE14,
    TEX_INDEX_15 = GL_TEXTURE15,
    TEX_INDEX_16 = GL_TEXTURE16,
    TEX_INDEX_17 = GL_TEXTURE17,
    TEX_INDEX_18 = GL_TEXTURE18,
    TEX_INDEX_19 = GL_TEXTURE19,
    TEX_INDEX_20 = GL_TEXTURE20,
    TEX_INDEX_21 = GL_TEXTURE21,
    TEX_INDEX_22 = GL_TEXTURE22,
    TEX_INDEX_23 = GL_TEXTURE23,
    TEX_INDEX_24 = GL_TEXTURE24,
    TEX_INDEX_25 = GL_TEXTURE25,
    TEX_INDEX_26 = GL_TEXTURE26,
    TEX_INDEX_27 = GL_TEXTURE27,
    TEX_INDEX_28 = GL_TEXTURE28,
    TEX_INDEX_29 = GL_TEXTURE29,
    TEX_INDEX_30 = GL_TEXTURE30,
    TEX_INDEX_31 = GL_TEXTURE31
};
